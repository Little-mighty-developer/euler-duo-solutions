package solutions;

/**
 * Project Euler Problem 2: Even Fibonacci Numbers
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 */
public class Euler002 {
    /**
     * Calculate the sum of even Fibonacci numbers not exceeding the given limit.
     *
     * @param limit The upper bound (inclusive)
     * @return The sum of even Fibonacci numbers not exceeding the limit
     */
    public static int sumEvenFibonacciNumbers(int limit) {
        int sum = 0;
        int prev = 1;
        int curr = 2;

        while (curr <= limit) {
            if (curr % 2 == 0) {
                sum += curr;
            }
            int next = prev + curr;
            prev = curr;
            curr = next;
        }

        return sum;
    }

    public static void main(String[] args) {
        System.out.println(sumEvenFibonacciNumbers(4_000_000));
    }
} 